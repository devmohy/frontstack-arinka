@mixin transform($transform) {
  -webkit-transform: $transform;
  -moz-transform: $transform;
  -ms-transform: $transform;
  -o-transform: $transform;
  transform: $transform;
}

@mixin transition($transitions...) {
  $unfoldedTransitions: ();
  @each $transition in $transitions {
    $unfoldedTransitions: append($unfoldedTransitions, unfoldTransition($transition), comma);
  }

  -webkit-transition: $unfoldedTransitions;
  -moz-transition: $unfoldedTransitions;
  -ms-transition: $unfoldedTransitions;
  -o-transition: $unfoldedTransitions;
  transition: $unfoldedTransitions;
}

@function unfoldTransition ($transition) {
  // Default values
  $property: all;
  $duration: .2s;
  $easing: null; // Browser default is ease, which is what we want
  $delay: null; // Browser default is 0, which is what we want
  $defaultProperties: ($property, $duration, $easing, $delay);

  // Grab transition properties if they exist
  $unfoldedTransition: ();
  @for $i from 1 through length($defaultProperties) {
    $p: null;
    @if $i <= length($transition) {
      $p: nth($transition, $i)
    } @else {
      $p: nth($defaultProperties, $i)
    }
    $unfoldedTransition: append($unfoldedTransition, $p);
  }

  @return $unfoldedTransition;
}

@mixin text-shadow($text-shadow) {
  -webkit-text-shadow: $text-shadow;
  -moz-text-shadow: $text-shadow;
  -ms-text-shadow: $text-shadow;
  -o-text-shadow: $text-shadow;
  text-shadow: $text-shadow;
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie);
}

@mixin box-sizing($value: border-box) {
  -webkit-box-sizing: $value;
  -moz-box-sizing: $value;
  box-sizing: $value;
}

@mixin box-shadow($box-shadow) {
  -webkit-box-shadow: $box-shadow;
  -moz-box-shadow: $box-shadow;
  -ms-box-shadow: $box-shadow;
  -o-box-shadow: $box-shadow;
  box-shadow: $box-shadow;
}

@mixin border-radius($radius: 2px) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  -ms-border-radius: $radius;
  -o-border-radius: $radius;
  border-radius: $radius;
}

@mixin calc($property, $expression) {
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: -moz-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

@mixin browserSelection ($bgColor, $fgColor) {
  ::selection {
    background: lighten($bgColor, 9%);
    color: $fgColor;
  }
  ::-webkit-selection {
    background: lighten($bgColor, 9%);
    color: $fgColor;
  }
  ::-moz-selection {
    background: lighten($bgColor, 9%);
    color: $fgColor;
  }
  ::-ms-selection {
    background: lighten($bgColor, 9%);
    color: $fgColor;
  }
  ::-o-selection {
    background: lighten($bgColor, 9%);
    color: $fgColor;
  }
}

@mixin overviewgradient() {
  background: #EC5857;
  background: -webkit-linear-gradient($expr);
  background: -o-linear-gradient($expr);
  background: -ms-linear-gradient($expr);
  background: -moz-linear-gradient($expr);
  background: linear-gradient($expr2);
}

@mixin footergradient() {
  background: #E36F55;
  background: -webkit-linear-gradient(top, rgb(235, 146, 127) 0%, rgb(215, 143, 82) 100%);
  background: -o-linear-gradient(top, rgb(235, 146, 127) 0%, rgb(215, 143, 82) 100%);
  background: -ms-linear-gradient(top, rgb(235, 146, 127) 0%, rgb(215, 143, 82) 100%);
  background: -moz-linear-gradient(top, rgb(235, 146, 127) 0%, rgb(215, 143, 82) 100%);
  background: linear-gradient(to bottom, rgb(235, 146, 127) 0%, rgb(215, 143, 82) 100%);
}

@mixin cloudinaryimage(
  $id,
  $filename,
  $width: 370,
  $height: 370,
  $crop: 'fill'
) {
  background-image: url(
    'https://res.cloudinary.com/dqsuy3rzt/image/upload/w_#{$width},h_#{$height},f_auto,q_auto,g_auto:100,c_#{$crop}/v15097997#{$id}/#{$filename}.jpg'
  );
}
